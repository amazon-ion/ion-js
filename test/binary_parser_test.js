/*
 * Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

// tesx_parser_test.js: test text span and general text parser

// TODO:
//      test skip functionality
//      deeper checks on actual values returned
//      add base64 decoding where appropriate
//      add binary reader testing
//      check utf-8 character handling 

"use strict";

var test_one, tests_good, tests_bad, test_specials;

var t_counter = 0, t_breakpoint = 6;

var prefix = function(p) {
  var ii = p.depth(), prefix = "";
  while (ii-->0) {
    prefix += " ";
  }
  return prefix;
};

var traverse = function(p) {
  var t, s, f, ii, i = "";
  for (;;) {
    t_counter++;
    if (t_counter === t_breakpoint) {
      t = undefined;
    }
    t = p.next();
    if (t === undefined) break;
    if (p.hasAnnotations()) {
      for(ii=0
         ;(s = p.getAnnotation(ii)) !== undefined
         ;ii++
      ) {
        if (ii > 0) i += "::";
        i += s;
      }
      i += "::";
    }
    if (t.container) {
      p.stepIn();
      i += prefix(p) + "{" + "\n";
      i += prefix(p) + " ";
      i += traverse(p);
      i += prefix(p) + "}" + "\n";
      p.stepOut();
    }
    else {
      i += prefix(p);
      f = p.fieldName();
      if (typeof f === 'string') i += f + ": ";
      s = p.stringValue();
      i += s;
    }
  }
  i += " ";
  return i
};

var load = function(parser) {
  var list =  load_list(parser);
  return list;
};

var load_list = function(parser) {
  var t, s, c, parent = [];
  for (;;) {
    t = parser.next();
    if (t === undefined) break;
    if (t.container) {
      parser.stepIn();
      if (t == ION.STRUCT) {
        c = load_struct(parser);
      }
      else {
        c = load_list(parser);
      }
      parser.stepOut();
      parent.push(c);
    }
    else {
      s = parser.stringValue();
      parent.push(s);
    }
  }
  return parent;  
};

var load_struct = function(parser) {
  var t, s, c, f, parent = {};
  for (;;) {
    t = parser.next();
    if (t === undefined) break;
    f = parser.fieldName();
    if (t.container) {
      parser.stepIn();
      if (t == ION.STRUCT) {
        c = load_struct(parser);
      }
      else {
        c = load_list(parser);
      }
      parser.stepOut();
      parent[f] = c;
    }
    else {
      s = parser.stringValue();
      parent[f] = s;
    }
  }
  return parent;  
};

var test2 = function() {

  if (!ION) {
    throw "error - no ION in test_text_span_number_parser.js";
  }

  var vstr, ii, e, passed, n = 0, p, str, sp, image;

  window.a_test = {
    value_set: "",
    idx: 0,
    value: "",
    image: "",
  };
  
  var run_good_tests = function() {
    var image2, name;
    
    // run test_one first to make debuggin easier (it MUST
    // be a duplicate of some other test, otherwise add it
    // to the test suite
    window.a_test.value_set = 'test_one';
    str = test_one;
    window.a_test.idx = 0;
    window.a_test.value = str;
    window.a_test.image = "";

    sp = ION.makeSpan(str);
    p = new ION.BinaryReader(sp);
    image = load(p);
    
    sp = ION.makeSpan(str);
    p = new ION.BinaryReader(sp);
    image2 = traverse(p);

    vstr = str + " - passed as good, like it should";
    window.a_test.image = vstr;
    n++;
    
    image2 = ""; // just to keep the debugging window less confusing
    
    // test the good values first
    window.a_test.value_set = 'test_numbers_good';
    for (ii=0; ii<some.length; ii++) {
      str = some[ii].val;
      name = some[ii].name;
      
      window.a_test.idx = ii;
      window.a_test.value = str;
      window.a_test.image = "";
      
      sp = ION.makeSpan(str);
      p = new ION.BinaryReader(sp);
      image = traverse(p);
      vstr = str 
           + " - " 
           + some[ii].name 
           + " - passed as good, like it should";
      window.a_test.image = vstr;
      n++;
    }
  };
  run_good_tests();
/*
  var run_bad_tests = function() {
    // now test the bad values - all should fail
    window.a_test.value_set = 'test_number_bad';
    for (ii=0; ii<tests_bad.length; ii++) {
      str = tests_bad[ii];
      
      window.a_test.idx = ii;
      window.a_test.value = str;
      window.a_test.image = "";
      
      sp = ION.makeSpan(str);
      passed = true;
      try {
        p = new ION.TextReader(sp);
        image = traverse(p);
        vstr = str + "\n-- passed as good! (when it's supposed to be bad)";
      }
      catch (e) {
        vstr = "error at offset "+sp.offset();
        passed = false;
      }
      if (passed) {
        ION.error(vstr);
      }
      window.a_test.image = vstr;
      n++;
    }
  };
  run_bad_tests();
      
  var run_special_tests = function() {
    // now test the "special" values
    window.a_test.value_set = 'test_specials';
    for (ii=0; ii<test_specials.length; ii++) {
      str = test_specials[ii];
      
      window.a_test.idx = ii;
      window.a_test.value = str;
      window.a_test.image = "";
      
      sp = ION.makeSpan(str);
      p = new ION.TextReader(sp);
      image = traverse(p);

      vstr = str + " - passed as good, like it should";
      window.a_test.image = vstr;
      n++;
   }
  };
  run_special_tests();
*/
  
  return "test1 - tested "+n+" values";
};

// test binary 
var
  decimalNegativeZeroDot =
  [
    224,      1,      0,    234,
     82,    128,    128
  ],
  intBigSize13 =
  [
    224,      1,      0,    234,
     45,    143,     20,    202,
    111,     96,     56,     87,
    183,    159,     74,    115,
    204,    180
  ],
  item1 =
  [
    224,      1,      0,    234,
    238,    162,    129,    131,
    222,    158,    134,    190,
    155,    220,    132,    132,
    105,    111,    112,     99,
    133,     33,      1,    136,
     33,     10,    221,    132,
    132,    105,    111,    112,
    103,    133,     33,      2,
    136,     34,     55,    187,
    238,      3,    159,    129,
    155,    222,      3,    154,
    152,     33,      1,    151,
    138,     66,     84,     48,
     48,     68,     67,     78,
     57,     79,     75,    154,
    222,      3,    132,    156,
    180,    211,    146,    113,
    144,    165,    180,    211,
    146,     33,      2,    197,
    190,    163,    222,    161,
    147,    113,     10,    146,
    142,    155,    104,    105,
    115,     32,    100,    101,
    112,    108,    111,    121,
    109,    101,    110,    116,
     32,    109,    105,     99,
    114,    111,    115,    121,
    115,    116,    101,    109,
    115,    163,    190,    166,
    222,    164,    147,    113,
     10,    146,    142,    158,
    117,    110,    104,     97,
    112,    112,    105,    101,
    115,    116,     32,    100,
    105,    115,     99,    111,
    114,    100,     97,    110,
    116,     32,    100,    114,
    111,    112,    112,    101,
    114,    115,     56,    147,
    181,    212,    146,    114,
     38,    161,    232,    190,
    153,    222,    151,    146,
    142,    148,    115,    107,
    121,    100,    105,    118,
    105,    110,    103,     45,
     97,    108,    116,    105,
    109,    101,    116,    101,
    114,    115,    240,    190,
    157,    222,    155,    146,
    142,    152,     54,     52,
     49,     50,     53,     49,
     52,     57,     55,     48,
     50,     57,     56,     57,
     49,     50,     53,     49,
     52,     57,     55,     48,
     50,     56,      8,    236,
    190,    166,    222,    164,
    147,    113,     10,    146,
    142,    158,    117,    110,
    104,     97,    112,    112,
    105,    101,    115,    116,
     32,    100,    105,    115,
     99,    111,    114,    100,
     97,    110,    116,     32,
    100,    114,    111,    112,
    112,    101,    114,    115,
     41,    239,    179,    210,
    146,     17,     56,    202,
    181,    212,    146,    114,
     38,    167,    188,    190,
    157,    222,    155,    147,
    113,     10,    146,    142,
    149,     69,    100,    110,
     97,     32,    100,    105,
    115,    103,    117,    115,
    116,    115,     32,    109,
     97,    115,     99,     97,
    114,     97,    160,    180,
    211,    146,    113,    159,
    170,    190,    164,    222,
    162,    147,    113,     10,
    146,    142,    156,    109,
    101,    116,     97,    112,
    104,    121,    115,    105,
     99,    115,     32,     85,
    114,    113,    117,    104,
     97,    114,    116,     32,
     67,    121,     99,    108,
    111,    112,    115,    167,
    187,    218,    146,    104,
    128,     15,    218,    137,
    138,    147,    187,    179,
    158,    180,    211,    146,
    113,     47,    157,    180,
    211,    146,    113,    117,
    159,    180,    211,    146,
    113,    117,    162,    180,
    211,    146,    113,     36,
    168,    180,    211,    146,
    113,    141,    176,    190,
    145,    222,    143,    146,
    141,     57,     55,     49,
     50,     53,     49,     52,
     57,     48,     55,     48,
     50,     55,      9,    229,
    190,    157,    222,    155,
    146,    142,    152,     54,
     52,     49,     50,     53,
     49,     52,     57,     55,
     48,     50,     57,     56,
     57,     49,     50,     53,
     49,     52,     57,     55,
     48,     50,     56,    133,
     33,      2
  ],

  nullBlob =
  [
    224,      1,      0,    234,
    175
  ],

  structAnnotatedOrdered =
  [
//    224,      1,      0,    234,
//    235,    130,    135,    136,
//    209,    134,    132,     15,
//    133,     16,    134,     17
//
//  max_id::symbols::{
//    name:null,
//    version:false,
//    imports:true
//  }

    0xe0,  0x1,  0x0, 0xea,  // $ion_1_0
    0xeb, 0x82, 0x87, 0x88,  // max_id::symbols::{
    0xd1, 0x86, // ordered struct length 6
    0x84,  0xf, // name: null
    0x85, 0x10, // version: false
    0x86, 0x11, // imports: true
  ],

  structEmpty =
  [
    224,      1,      0,    234,
    208
  ],

  structLen13 =
  [
    224,      1,      0,    234,
    221,    132,    139,     49,
     50,     51,     52,     53,
     54,     55,     56,     57,
     65,     66
  ],

  structLen14 =
  [
    224,      1,      0,    234,
    222,    142,    132,    140,
     49,     50,     51,     52,
     53,     54,     55,     56,
     57,     65,     66,     67
  ],

  structLen15 =
  [
    224,      1,      0,    234,
    222,    143,    132,    141,
     49,     50,     51,     52,
     53,     54,     55,     56,
     57,     65,     66,     67,
     68
  ],

  structOrdered =
  [
    224,      1,      0,    234,
    209,    134,    132,     15,
    133,     16,    134,     17
  ],

  structUnordered =
  [
    224,      1,      0,    234,
    214,    132,     15,    133,
     16,    134,     17
  ],

  testfile28 = 
  [
    0xe0,   0x1,   0x0,  0xea,
    0xea,  0x81,  0x83,  0xd7,
    0x87,  0xb5,  0x84,  0x73,
    0x6a,  0x69,  0x73,  0xce,
    0x95,  0xee,  0x93,  0x81,
    0x8a,  0x9e,  0x8f,  0x32,
    0x30,  0x30,  0x37,  0x2d,
     0x0,  0x73,  0x64,  0x66,
    0x2d,  0x31,  0x31,  0x2d,
    0x32,  0x30
  ],

  ___item1 =
  [
    0xe0,   0x1,   0x0,  0xea,
    0xee,   0x4,  0xe8,  0x81,      0x83,  0xde,   0x4,  0xe3,
    0x87,  0xbe,   0x4,  0xdf,      0x8e,  0x9f,  0x63,  0x6f,
    0x6d,  0x2e,  0x61,  0x6d,      0x61,  0x7a,  0x6f,  0x6e,
    0x2e,  0x69,  0x74,  0x65,      0x6d,  0x5f,  0x6d,  0x61,
    0x73,  0x74,  0x65,  0x72,      0x2e,  0x49,  0x74,  0x65,
    0x6d,  0x40,  0x30,  0x2e,      0x31,  0x8e,  0x8e,  0x6d,
    0x61,  0x72,  0x6b,  0x65,      0x74,  0x70,  0x6c,  0x61,
    0x63,  0x65,  0x5f,  0x69,      0x64,  0x87,  0x69,  0x74,
    0x65,  0x6d,  0x5f,  0x69,      0x64,  0x87,  0x70,  0x72,
    0x6f,  0x64,  0x75,  0x63,      0x74,  0x8e,  0x95,  0x67,
    0x6c,  0x5f,  0x70,  0x72,      0x6f,  0x64,  0x75,  0x63,
    0x74,  0x5f,  0x67,  0x72,      0x6f,  0x75,  0x70,  0x5f,
    0x74,  0x79,  0x70,  0x65,      0x89,  0x67,  0x6c,  0x5f,
    0x73,  0x70,  0x6f,  0x72,      0x74,  0x73,  0x85,  0x76,
    0x61,  0x6c,  0x75,  0x65,      0x8e,  0x90,  0x69,  0x6d,
    0x5f,  0x76,  0x65,  0x72,      0x73,  0x69,  0x6f,  0x6e,
    0x5f,  0x73,  0x74,  0x61,      0x6d,  0x70,  0x8e,  0x93,
    0x70,  0x72,  0x6f,  0x64,      0x75,  0x63,  0x74,  0x5f,
    0x64,  0x65,  0x73,  0x63,      0x72,  0x69,  0x70,  0x74,
    0x69,  0x6f,  0x6e,  0x85,      0x65,  0x6e,  0x5f,  0x55,
    0x53,  0x8c,  0x6c,  0x61,      0x6e,  0x67,  0x75,  0x61,
    0x67,  0x65,  0x5f,  0x74,      0x61,  0x67,  0x89,  0x69,
    0x74,  0x65,  0x6d,  0x5f,      0x6e,  0x61,  0x6d,  0x65,
    0x8e,  0x9a,  0x77,  0x65,      0x61,  0x6b,  0x5f,  0x63,
    0x6f,  0x6e,  0x74,  0x72,      0x69,  0x62,  0x75,  0x74,
    0x69,  0x6f,  0x6e,  0x5f,      0x70,  0x72,  0x65,  0x73,
    0x65,  0x6e,  0x63,  0x65,      0x8e,  0x91,  0x69,  0x74,
    0x65,  0x6d,  0x5f,  0x74,      0x79,  0x70,  0x65,  0x5f,
    0x6b,  0x65,  0x79,  0x77,      0x6f,  0x72,  0x64,  0x8b,
    0x70,  0x61,  0x72,  0x74,      0x5f,  0x6e,  0x75,  0x6d,
    0x62,  0x65,  0x72,  0x8e,      0x9c,  0x64,  0x65,  0x70,
    0x72,  0x65,  0x63,  0x61,      0x74,  0x65,  0x64,  0x5f,
    0x64,  0x69,  0x73,  0x70,      0x6c,  0x61,  0x79,  0x5f,
    0x69,  0x74,  0x65,  0x6d,      0x5f,  0x6e,  0x61,  0x6d,
    0x65,  0x8e,  0xa7,  0x64,      0x65,  0x70,  0x72,  0x65,
    0x63,  0x61,  0x74,  0x65,      0x64,  0x5f,  0x68,  0x61,
    0x73,  0x5f,  0x65,  0x71,      0x75,  0x69,  0x76,  0x5f,
    0x6d,  0x61,  0x74,  0x63,      0x68,  0x65,  0x64,  0x5f,
    0x73,  0x75,  0x62,  0x6d,      0x69,  0x73,  0x73,  0x69,
    0x6f,  0x6e,  0x8e,  0xa1,      0x70,  0x72,  0x6f,  0x64,
    0x75,  0x63,  0x74,  0x5f,      0x61,  0x64,  0x73,  0x5f,
    0x63,  0x6f,  0x6e,  0x74,      0x72,  0x69,  0x62,  0x75,
    0x74,  0x69,  0x6f,  0x6e,      0x5f,  0x70,  0x72,  0x65,
    0x73,  0x65,  0x6e,  0x63,      0x65,  0x85,  0x62,  0x72,
    0x61,  0x6e,  0x64,  0x8c,      0x70,  0x72,  0x6f,  0x64,
    0x75,  0x63,  0x74,  0x5f,      0x74,  0x79,  0x70,  0x65,
    0x8e,  0x8e,  0x53,  0x50,      0x4f,  0x52,  0x54,  0x49,
    0x4e,  0x47,  0x5f,  0x47,      0x4f,  0x4f,  0x44,  0x53,
    0x8c,  0x6d,  0x61,  0x6e,      0x75,  0x66,  0x61,  0x63,
    0x74,  0x75,  0x72,  0x65,      0x72,  0x8e,  0x98,  0x70,
    0x72,  0x6f,  0x64,  0x75,      0x63,  0x74,  0x5f,  0x73,
    0x69,  0x74,  0x65,  0x5f,      0x6c,  0x61,  0x75,  0x6e,
    0x63,  0x68,  0x5f,  0x64,      0x61,  0x74,  0x65,  0x8e,
    0x96,  0x61,  0x76,  0x61,      0x69,  0x6c,  0x61,  0x62,
    0x69,  0x6c,  0x69,  0x74,      0x79,  0x5f,  0x6c,  0x69,
    0x66,  0x65,  0x63,  0x79,      0x63,  0x6c,  0x65,  0x8e,
    0x96,  0x70,  0x75,  0x62,      0x6c,  0x69,  0x73,  0x68,
    0x65,  0x72,  0x5f,  0x6f,      0x75,  0x74,  0x5f,  0x6f,
    0x66,  0x5f,  0x73,  0x74,      0x6f,  0x63,  0x6b,  0x8e,
    0x92,  0x64,  0x69,  0x73,      0x70,  0x6c,  0x61,  0x79,
    0x5f,  0x6f,  0x6e,  0x5f,      0x77,  0x65,  0x62,  0x73,
    0x69,  0x74,  0x65,  0x8e,      0x99,  0x73,  0x70,  0x6f,
    0x72,  0x74,  0x73,  0x5f,      0x64,  0x69,  0x73,  0x70,
    0x6c,  0x61,  0x79,  0x5f,      0x6f,  0x6e,  0x5f,  0x77,
    0x65,  0x62,  0x73,  0x69,      0x74,  0x65,  0x8e,  0x91,
    0x64,  0x69,  0x73,  0x70,      0x6c,  0x61,  0x79,  0x5f,
    0x61,  0x74,  0x74,  0x72,      0x69,  0x62,  0x75,  0x74,
    0x65,  0x8e,  0x93,  0x69,      0x74,  0x65,  0x6d,  0x5f,
    0x63,  0x6c,  0x61,  0x73,      0x73,  0x69,  0x66,  0x69,
    0x63,  0x61,  0x74,  0x69,      0x6f,  0x6e,  0x8c,  0x62,
    0x61,  0x73,  0x65,  0x5f,      0x70,  0x72,  0x6f,  0x64,
    0x75,  0x63,  0x74,  0x87,      0x62,  0x69,  0x6e,  0x64,
    0x69,  0x6e,  0x67,  0x8d,      0x6d,  0x69,  0x73,  0x63,
    0x65,  0x6c,  0x6c,  0x61,      0x6e,  0x65,  0x6f,  0x75,
    0x73,  0x83,  0x65,  0x61,      0x6e,  0x8e,  0x94,  0x6d,
    0x61,  0x74,  0x63,  0x68,      0x69,  0x6e,  0x67,  0x5f,
    0x70,  0x61,  0x72,  0x74,      0x5f,  0x6e,  0x75,  0x6d,
    0x62,  0x65,  0x72,  0xee,       0x3,  0x9a,  0x81,  0x8a,
    0xde,   0x3,  0x95,  0x8b,      0x21,   0x1,  0x8c,  0x8a,
    0x42,  0x54,  0x30,  0x30,      0x44,  0x43,  0x4e,  0x39,
    0x4f,  0x4b,  0x8d,  0xde,       0x2,  0xff,  0x8e,  0xb4,
    0xd3,  0x90,  0x71,   0xf,      0x91,  0xb4,  0xd3,  0x90,
    0x21,   0x2,  0x92,  0xbe,      0xa3,  0xde,  0xa1,  0x94,
    0x71,  0x13,  0x90,  0x8e,      0x9b,  0x68,  0x69,  0x73,
    0x20,  0x64,  0x65,  0x70,      0x6c,  0x6f,  0x79,  0x6d,
    0x65,  0x6e,  0x74,  0x20,      0x6d,  0x69,  0x63,  0x72,
    0x6f,  0x73,  0x79,  0x73,      0x74,  0x65,  0x6d,  0x73,
    0x95,  0xbe,  0xa6,  0xde,      0xa4,  0x94,  0x71,  0x13,
    0x90,  0x8e,  0x9e,  0x75,      0x6e,  0x68,  0x61,  0x70,
    0x70,  0x69,  0x65,  0x73,      0x74,  0x20,  0x64,  0x69,
    0x73,  0x63,  0x6f,  0x72,      0x64,  0x61,  0x6e,  0x74,
    0x20,  0x64,  0x72,  0x6f,      0x70,  0x70,  0x65,  0x72,
    0x73,  0x96,  0xb5,  0xd4,      0x90,  0x72,  0x26,  0xa1,
    0x97,  0xbe,  0x99,  0xde,      0x97,  0x90,  0x8e,  0x94,
    0x73,  0x6b,  0x79,  0x64,      0x69,  0x76,  0x69,  0x6e,
    0x67,  0x2d,  0x61,  0x6c,      0x74,  0x69,  0x6d,  0x65,
    0x74,  0x65,  0x72,  0x73,      0x98,  0xbe,  0x9d,  0xde,
    0x9b,  0x90,  0x8e,  0x98,      0x36,  0x34,  0x31,  0x32,
    0x35,  0x31,  0x34,  0x39,      0x37,  0x30,  0x32,  0x39,
    0x38,  0x39,  0x31,  0x32,      0x35,  0x31,  0x34,  0x39,
    0x37,  0x30,  0x32,  0x38,      0x99,  0xbe,  0xa6,  0xde,
    0xa4,  0x94,  0x71,  0x13,      0x90,  0x8e,  0x9e,  0x75,
    0x6e,  0x68,  0x61,  0x70,      0x70,  0x69,  0x65,  0x73,
    0x74,  0x20,  0x64,  0x69,      0x73,  0x63,  0x6f,  0x72,
    0x64,  0x61,  0x6e,  0x74,      0x20,  0x64,  0x72,  0x6f,
    0x70,  0x70,  0x65,  0x72,      0x73,  0x9a,  0xb3,  0xd2,
    0x90,  0x11,  0x9b,  0xb5,      0xd4,  0x90,  0x72,  0x26,
    0xa7,  0x9c,  0xbe,  0x9d,      0xde,  0x9b,  0x94,  0x71,
    0x13,  0x90,  0x8e,  0x95,      0x45,  0x64,  0x6e,  0x61,
    0x20,  0x64,  0x69,  0x73,      0x67,  0x75,  0x73,  0x74,
    0x73,  0x20,  0x6d,  0x61,      0x73,  0x63,  0x61,  0x72,
    0x61,  0x9d,  0xb4,  0xd3,      0x90,  0x71,  0x1e,  0x9f,
    0xbe,  0xa4,  0xde,  0xa2,      0x94,  0x71,  0x13,  0x90,
    0x8e,  0x9c,  0x6d,  0x65,      0x74,  0x61,  0x70,  0x68,
    0x79,  0x73,  0x69,  0x63,      0x73,  0x20,  0x55,  0x72,
    0x71,  0x75,  0x68,  0x61,      0x72,  0x74,  0x20,  0x43,
    0x79,  0x63,  0x6c,  0x6f,      0x70,  0x73,  0xa0,  0xbb,
    0xda,  0x90,  0x68,  0x80,       0xf,  0xda,  0x89,  0x8a,
    0x93,  0xbb,  0xb3,  0xa1,      0xb4,  0xd3,  0x90,  0x71,
    0x22,  0xa3,  0xb4,  0xd3,      0x90,  0x71,  0x24,  0xa5,
    0xb4,  0xd3,  0x90,  0x71,      0x24,  0xa6,  0xb4,  0xd3,
    0x90,  0x71,  0x27,  0xa8,      0xb4,  0xd3,  0x90,  0x71,
    0x29,  0xaa,  0xbe,  0x91,      0xde,  0x8f,  0x90,  0x8d,
    0x39,  0x37,  0x31,  0x32,      0x35,  0x31,  0x34,  0x39,
    0x30,  0x37,  0x30,  0x32,      0x37,  0xab,  0xbe,  0x9d,
    0xde,  0x9b,  0x90,  0x8e,      0x98,  0x36,  0x34,  0x31,
    0x32,  0x35,  0x31,  0x34,      0x39,  0x37,  0x30,  0x32,
    0x39,  0x38,  0x39,  0x31,      0x32,  0x35,  0x31,  0x34,
    0x39,  0x37,  0x30,  0x32,      0x38,  0x85,  0x21,   0x2
  ],

  some = [
    {name:"decimalNegativeZeroDot", val:decimalNegativeZeroDot,},
    {name:"intBigSize13", val:intBigSize13,},
    {name:"item1", val:item1,},
    {name:"nullBlob", val:nullBlob,},
    {name:"structAnnotatedOrdered", val:structAnnotatedOrdered,},
    {name:"structEmpty", val:structEmpty,},
    {name:"structLen13", val:structLen13,},
    {name:"structLen14", val:structLen14,},
    {name:"structLen15", val:structLen15,},
    {name:"structOrdered", val:structOrdered,},
    {name:"structUnordered", val:structUnordered,},
    {name:"testfile28", val:testfile28,},
    {name:"___item1", val:___item1,},
  ]
  
  test_one = structAnnotatedOrdered
  ;